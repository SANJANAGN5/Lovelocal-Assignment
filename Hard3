Hard3
Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

CODE:

def count_ones_optimized(n):
    count = 0
    multiplier = 1

    while n // multiplier > 0:
      before = n // (multiplier * 10) * multiplier
      current = n // multiplier % 10
      after = n % multiplier
      if current > 1:
        count += (before + multiplier)
      elif current == 1:
        count += (before + after + 1)
      multiplier *= 10
    return count

if __name__ == "__main__":
    n = 13
    result = count_ones_optimized(n)
    print(result)

Explanation:
defining a function named 'count_ones_optimized'.The variable named count set to '0' .It will be used to storethe count of occurrences of the digit '1'.
and Variable multiplier is set to '1' keep track of the digit place (ones, tens, hundreds, etc).
While loop that continues as long as there are more digit places to examine in 'n'.
before:Calculates the value of digits before the current digit place.
current:Calculates the value of the current digit place.
After:Calculates the value of digits after the current digit place.
'if' checks if the digit at the current place is greater than 1. If it is,then it adds the count of '1's from the current digit place.
'elif' checks if the digit at the current place is equal to 1. If it is 1, it adds the count of '1's from the current digit place.
Moves to the next digit position by multiplying multiplier by 10.After the loop completes, the function returns the final count.

Algorithm: Optimized Algorithm
This algorithm is used to count the number of occurrences of the digit '1' in the representation of a positive integer n.
1.It uses a while loop to iterate through each digit place in the number.
2.Inside the loop, it calculates before,current and after.
3.It checks the value of the current digit,
     If current > 1, it adds (before + multiplier) to the count.
     If current == 1, it adds (before + after + 1) to the count.
4.The loop continues until the entire number is processed.
5.The final count is returned.

Time Complexity is O(logn).

OUTPUT:
For Example 1:
Input: n = 13
Output: 6

For Example 2:
Input: n = 0
Output: 0

