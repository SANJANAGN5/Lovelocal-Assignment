Easy 3
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown

CODE:
 
def generate_pascals_triangle(numRows):
   if numRows == 0:
      return []
   result = [[1]]
   for i in range(1, numRows):
      row = [1]
      for j in range(1, i):
         row.append(result[i-1][j-1] + result[i-1][j])
      row.append(1)
      result.append(row)
   return result

numRows = 5
output = generate_pascals_triangle(numRows)
print(output)

Explanation:
Defining a function named 'generate_pascals_triangle' that takes a parameter numRows.
if numRows is equal to 0.Then the function returns an empty list [].This is the case when zero rows are requested.
Initializing the variable result as a list contains a single list with the value [1]. 
'for' loop that iterates from 1 to numRows - 1.it shows the rows of Pascal's Triangle starting from the second row.
another for loop is used that iterates from 1 to i - 1. It represents the elements within each row.
appending the result to the row list after calculating the value of the current position in the row by adding the 
corresponding element from previous row.
After inner loop, the last element of each row is appended and then appends newly created row to 'result' list.
After outer loop, function returns the final result.

Algorithm:
The approach of algorithm is to generate the Pascal's Triangle.
1.Initializing an empty list 'result'.
2.For each row from 1 to numRows:
   Create a new row with the first element as 1.
   For each middle element, calculate the sum of the two elements directly above it from the previous row.
   Append 1 to the end of the row.
   Append the row to the result.
3.Return the result list containing Pascal's triangle.

Time Complexity is O(numRows^2).It is the number of rows in the output triangle.

OUTPUT:
For Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

For Example 2:
Input: numRows = 1
Output: [[1]]
